<!DOCTYPE html>
<html>

<head>
    <title>AMT | EAA2018 Example</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <script type="text/javascript" src="js/amt.js"></script>
    <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/vis/4.20.0/vis.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/vis/4.20.0/vis.min.css" rel="stylesheet" type="text/css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.100.2/js/materialize.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.100.2/css/materialize.min.css">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
        }

        body {
            height: 100%;
            width: 100%;
            position: absolute;
            overflow: hidden;
            display: flex;
            min-height: 100vh;
            flex-direction: column;
        }

        #footer {
            height: 100px;
            color: black;
        }

        #graph {
            height: calc(100% - 100px);
        }

        .description {
            margin-left: 25px;
        }

        .modal {
            width: 90% !important;
            height: 100% !important;
        }
    </style>
    <script>
        var EAA = {};
        EAA.prefix = "http://rgzm.de/datingmechanism#";
        EAA.graph = {};
        EAA.edit = false;
        EAA.thisNodes = [];
        EAA.thisEdges = [];
        EAA.inverse = false;
        EAA.mode = "limesConnections";
        EAA.reasoning = false;
        var update = function() {
            EAA.amt = new AMT();
            EAA.amt.load(function() {
                var graph = EAA.amt.getGraph(false, true);
                EAA.graph.nodes = new vis.DataSet(graph.nodes);
                EAA.graph.edges = new vis.DataSet(graph.edges);
            });

            //if (EAA.amt) {
            setTimeout(function(){
                var options = {
                    layout: {
                        randomSeed: 5
                    },
                    physics: true
                };
                new vis.Network(document.getElementById("graph"), {
                    nodes: EAA.graph.nodes,
                    edges: EAA.graph.edges
                }, options);
                console.log(EAA.reasoning);
                var updated = EAA.amt.getGraph(EAA.reasoning, false);
                //var updated = EAA.amt.getGraph(false, false);
                EAA.graph.edges.clear();
                EAA.graph.nodes.clear();
                /*
                	Hier wird spezifiziert, wie die Knoten aussehen sollen
                */
                //console.info("load nodes");
                for (var i in updated.nodes) {
                    updated.nodes[i].length = 10 / updated.nodes[i].width;
                    if (!EAA.edit) {
                        updated.nodes[i].chosen = false;
                    }
                    if (updated.nodes[i].concept === EAA.prefix + "Potter") {
                        if (EAA.mode === "potterSiteLimes") {
                            updated.nodes[i].color = {
                                background: 'Crimson',
                                border: 'Crimson',
                                highlight: {
                                    background: 'white',
                                    border: 'red'
                                }
                            };
                            updated.nodes[i].shape = "square";
                            updated.nodes[i].font = {
                                size: 16,
                                face: 'monospace'
                            };
                            updated.nodes[i].size = 10;
                        } else {
                            updated.nodes[i].hidden = true;
                        }
                    } else if (updated.nodes[i].concept === EAA.prefix + "Site") {
                        if (EAA.mode === "siteLimesProvince" || EAA.mode === "potterSiteLimes") {
                            updated.nodes[i].color = {
                                background: 'green',
                                border: 'green',
                                highlight: {
                                    background: 'white',
                                    border: 'green'
                                }
                            };
                            updated.nodes[i].shape = "star";
                            updated.nodes[i].font = {
                                size: 16,
                                face: 'monospace'
                            };
                            updated.nodes[i].size = 20;
                        } else {
                            updated.nodes[i].hidden = true;
                        }
                    } else if (updated.nodes[i].concept === EAA.prefix + "LimesPart") {
                        if (EAA.mode === "siteLimesProvince" || EAA.mode === "potterSiteLimes" || EAA.mode === "limesConnections" || EAA.mode === "limesAllen") {
                            updated.nodes[i].color = {
                                background: 'coral',
                                border: 'coral',
                                highlight: {
                                    background: 'white',
                                    border: 'coral'
                                }
                            };
                            updated.nodes[i].shape = "diamond";
                            updated.nodes[i].font = {
                                size: 16,
                                face: 'monospace'
                            };
                            updated.nodes[i].size = 20;
                        } else {
                            updated.nodes[i].hidden = true;
                        }
                    } else if (updated.nodes[i].concept === EAA.prefix + "Province") {
                        if (EAA.mode === "siteLimesProvince") {
                            updated.nodes[i].color = {
                                background: 'GoldenRod',
                                border: 'GoldenRod',
                                highlight: {
                                    background: 'white',
                                    border: 'GoldenRod'
                                }
                            };
                            updated.nodes[i].shape = "dot";
                            updated.nodes[i].font = {
                                size: 16,
                                face: 'monospace'
                            };
                            updated.nodes[i].size = 10;
                        } else {
                            updated.nodes[i].hidden = true;
                        }
                    } else if (updated.nodes[i].concept === EAA.prefix + "SiteGeom") {
                        if ($("#showGeomConcepts").is(":checked")) {
                            updated.nodes[i].color = {
                                background: 'blue',
                                border: 'blue',
                                highlight: {
                                    background: 'white',
                                    border: 'blue'
                                }
                            };
                            updated.nodes[i].font = {
                                size: 8,
                                face: 'monospace'
                            };
                            var geojson = JSON.parse(updated.nodes[i].label);
                            var thislabel = "";
                            thislabel = JSON.stringify(geojson.coordinates);
                            updated.nodes[i].shape = "dot";
                            updated.nodes[i].size = 5;
                            updated.nodes[i].label = thislabel;
                        } else {
                            updated.nodes[i].hidden = true;
                        }
                    } else if (updated.nodes[i].concept === EAA.prefix + "LimesPartGeom") {
                        if ($("#showGeomConcepts").is(":checked")) {
                            updated.nodes[i].color = {
                                background: 'blue',
                                border: 'blue',
                                highlight: {
                                    background: 'white',
                                    border: 'blue'
                                }
                            };
                            updated.nodes[i].font = {
                                size: 8,
                                face: 'monospace'
                            };
                            updated.nodes[i].shape = "square";
                            updated.nodes[i].size = 5;
                            updated.nodes[i].label = "LineString";
                        } else {
                            updated.nodes[i].hidden = true;
                        }
                    } else if (updated.nodes[i].concept === EAA.prefix + "ProvinceGeom") {
                        if ($("#showGeomConcepts").is(":checked")) {
                            updated.nodes[i].color = {
                                background: 'blue',
                                border: 'blue',
                                highlight: {
                                    background: 'white',
                                    border: 'blue'
                                }
                            };
                            updated.nodes[i].font = {
                                size: 8,
                                face: 'monospace'
                            };
                            updated.nodes[i].shape = "square";
                            updated.nodes[i].size = 5;
                            updated.nodes[i].label = "Polygon";
                        } else {
                            updated.nodes[i].hidden = true;
                        }
                    } else {
                        updated.nodes[i].color = {
                            background: 'grey',
                            border: 'black',
                            highlight: {
                                background: 'white',
                                border: 'black'
                            }
                        };
                        updated.nodes[i].shape = "box";
                    }
                }
                /*
                	Hier wird spezifiziert wie die Kanten aussehen sollen, welche angezeigt werden sollen, etc
                */
                //console.info("load edges");
                for (var i in updated.edges) {
                    updated.edges[i].arrowStrikethrough = false;
                    updated.edges[i].chosen = false;
                    if (updated.edges[i].width < 0.0001) {
                        updated.edges[i].hidden = true;
                    }
                    var roleWithPrefix = EAA.prefix;
                    if (updated.edges[i].role === EAA.prefix + "connectedsl") {
                        if (EAA.mode === "potterSiteLimes" || EAA.mode === "siteLimesProvince") {
                            updated.edges[i].color = {
                                color: "FORESTGREEN",
                                highlight: "black"
                            };
                            updated.edges[i].dashes = true;
                            updated.edges[i].length = 500;
                            updated.edges[i].smooth = false;
                            /*if (updated.edges[i].from.localeCompare(updated.edges[i].to) >= 0) {
                                updated.edges[i].hidden = true;
                            }*/
                        } else {
                            updated.edges[i].hidden = true;
                        }
                    }
                    if (updated.edges[i].role === EAA.prefix + "connectedps") {
                        //console.log(updated.edges[i].role);
                        if (EAA.mode === "potterSiteLimes") {
                            updated.edges[i].color = {
                                color: "FORESTGREEN",
                                highlight: "black"
                            };
                            updated.edges[i].dashes = true;
                            updated.edges[i].length = 250;
                            updated.edges[i].smooth = false;
                            if (updated.edges[i].from.localeCompare(updated.edges[i].to) >= 0) {
                                updated.edges[i].hidden = true;
                            }
                        } else {
                            updated.edges[i].hidden = true;
                        }
                    }
                    if (updated.edges[i].role === EAA.prefix + "connectedpl") {
                        //console.log(updated.edges[i].role);
                        if (EAA.mode === "potterSiteLimes") {
                            updated.edges[i].color = {
                                color: "FORESTGREEN",
                                highlight: "black"
                            };
                            updated.edges[i].dashes = true;
                            updated.edges[i].length = 500;
                            updated.edges[i].smooth = false;
                            if (updated.edges[i].from.localeCompare(updated.edges[i].to) >= 0) {
                                updated.edges[i].hidden = true;
                            }
                        } else {
                            updated.edges[i].hidden = true;
                        }
                    }
                    if (updated.edges[i].role === EAA.prefix + "spatialconnectedlp") {
                        if (EAA.mode === "siteLimesProvince") {
                            updated.edges[i].color = {
                                color: "FORESTGREEN",
                                highlight: "black"
                            };
                            updated.edges[i].dashes = true;
                            updated.edges[i].length = 100;
                            updated.edges[i].smooth = false;
                            if (updated.edges[i].from.localeCompare(updated.edges[i].to) >= 0) {
                                updated.edges[i].hidden = true;
                            }
                        } else {
                            updated.edges[i].hidden = true;
                        }
                    }
                    if (updated.edges[i].role === EAA.prefix + "spatialconnectedsp") {
                        //console.log(updated.edges[i].role);
                        if (EAA.mode === "siteLimesProvince") {
                            updated.edges[i].color = {
                                color: "FORESTGREEN",
                                highlight: "black"
                            };
                            updated.edges[i].dashes = true;
                            updated.edges[i].length = 100;
                            updated.edges[i].smooth = false;
                            if (updated.edges[i].from.localeCompare(updated.edges[i].to) >= 0) {
                                updated.edges[i].hidden = true;
                            }
                        } else {
                            updated.edges[i].hidden = true;
                        }
                    }
                    if (updated.edges[i].role === EAA.prefix + "connectedll") {
                        if (EAA.mode === "limesConnections") {
                            updated.edges[i].color = {
                                color: "FORESTGREEN",
                                highlight: "black"
                            };
                            updated.edges[i].dashes = true;
                            updated.edges[i].length = 250;
                            updated.edges[i].smooth = false;
                            if (updated.edges[i].from.localeCompare(updated.edges[i].to) >= 0) {
                                updated.edges[i].hidden = true;
                            }
                        } else {
                            updated.edges[i].hidden = true;
                        }
                    }
                    if (updated.edges[i].role === EAA.prefix + "connectedlll") {
                        if (EAA.mode === "limesConnections") {
                            updated.edges[i].color = {
                                color: "TOMATO",
                                highlight: "black"
                            };
                            updated.edges[i].dashes = true;
                            updated.edges[i].length = 250;
                            updated.edges[i].smooth = false;
                            if (updated.edges[i].from.localeCompare(updated.edges[i].to) >= 0) {
                                updated.edges[i].hidden = true;
                            }
                        } else {
                            updated.edges[i].hidden = true;
                        }
                    }
                    if (updated.edges[i].role.includes("geom")) {
                        if ($("#showGeomConcepts").is(":checked")) {
                            updated.edges[i].color = {
                                color: "blue",
                                highlight: "black"
                            };
                            updated.edges[i].dashes = true;
                            updated.edges[i].length = 50;
                            updated.edges[i].smooth = false;
                            if (updated.edges[i].from.localeCompare(updated.edges[i].to) >= 0) {
                                updated.edges[i].hidden = true;
                            }
                        } else {
                            updated.edges[i].hidden = true;
                        }
                    }
                    if (updated.edges[i].role === roleWithPrefix + "e" ||
                        updated.edges[i].role === roleWithPrefix + "b" ||
                        updated.edges[i].role === roleWithPrefix + "a" ||
                        updated.edges[i].role === roleWithPrefix + "d" ||
                        updated.edges[i].role === roleWithPrefix + "di" ||
                        updated.edges[i].role === roleWithPrefix + "o" ||
                        updated.edges[i].role === roleWithPrefix + "oi" ||
                        updated.edges[i].role === roleWithPrefix + "m" ||
                        updated.edges[i].role === roleWithPrefix + "mi" ||
                        updated.edges[i].role === roleWithPrefix + "s" ||
                        updated.edges[i].role === roleWithPrefix + "si" ||
                        updated.edges[i].role === roleWithPrefix + "f" ||
                        updated.edges[i].role === roleWithPrefix + "fi"
                    ) {
                        if (EAA.mode === "limesAllen") {
                            updated.edges[i].color = {
                                color: "blue",
                                highlight: "black"
                            };
                            updated.edges[i].dashes = false;
                            updated.edges[i].length = 250;
                            updated.edges[i].smooth = true;
                            updated.edges[i].label = updated.edges[i].role.replace(EAA.prefix, "");
                            if (updated.edges[i].from.localeCompare(updated.edges[i].to) >= 0) {
                                //updated.edges[i].hidden = true;
                            }
                        } else {
                            updated.edges[i].hidden = true;
                        }
                    }
                    if (!updated.edges[i].hidden) {
                        //console.log(updated.edges[i].role, updated.edges[i].width);
                    }
                }
                EAA.graph.nodes.update(updated.nodes);
                if ($("#showEdges").is(":checked")) {
                    EAA.graph.edges.update(updated.edges);
                }
                EAA.thisNodes = updated.nodes;
                EAA.thisEdges = updated.edges;
            //}
        }, 1000);
        };
        var edit = function() {
            if (EAA.reasoning) {
                EAA.reasoning = false;
                $("#r-but").removeClass("red");
                $("#r-but").addClass("blue");
            } else {
                EAA.reasoning = true;
                $("#r-but").removeClass("blue");
                $("#r-but").addClass("red");
            }
            update();
        };

        $(function() {
            update();
            /*EAA.amt = new AMT();
            EAA.amt.load(function() {
                $(".edit").hide();
                $("#r-but").show();
                $("#e-but").hide();
                var graph = EAA.amt.getGraph(false, true);
                EAA.graph.nodes = new vis.DataSet(graph.nodes);
                EAA.graph.edges = new vis.DataSet(graph.edges);
                var options = {
                    layout: {
                        randomSeed: 12
                    },
                    physics: false
                };
                var network = new vis.Network(document.getElementById("graph"), {
                    nodes: EAA.graph.nodes,
                    edges: EAA.graph.edges
                }, options);
                update();
                /*network.on("selectNode", function(params) {
                    if (EAA.edit)
                        openModal(params.nodes[0]);
                });
                //switchOntology();
                //info();
            });*/
            $("#info").modal({
                complete: function() {
                    info(true);
                }
            });
            $("#exportModal").modal({
                complete: function() {
                    exportOptions(true);
                }
            });
            $("#loadModal").modal({
                complete: function() {
                    loadJSONGraph(true);
                }
            });
            $("#graphPropModal").modal({
                dismissible: false,
                complete: function() {
                    openGraphPropModal(true);
                }
            });
            $(".edit").hide();
            $("#store").hide();
        });
        var info = function(close) {
            if (close)
                $("#info").modal("close");
            else
                $("#info").modal("open");
        }
        var exportOptions = function(close) {
            if (close)
                $("#exportModal").modal("close");
            else
                $("#exportModal").modal("open");
        }
        var loadJSONGraph = function(close) {
            $("#json").val("");
            $("#json").height(75);
            if (close)
                $("#loadModal").modal("close");
            else
                $("#loadModal").modal("open");
        }
        /*var propModal = function(close) {
            $("#amt-viz").material_select();
            if (close)
                $("#propertiesModal").modal("close");
            else
                $("#propertiesModal").modal("open");
        }*/
        var openGraphPropModal = function(close) {
            $("#amt-viz").material_select();
            if (close)
                $("#graphPropModal").modal("close");
            else
                $("#graphPropModal").modal("open");
        }
        var reloadGraphWithProperties = function() {
            EAA.mode = $("#amt-viz").val();
            update();
            $("#graphPropModal").modal("close");
        }
        var loadJSONGraphInApp = function() {
            var json = JSON.parse($("#json").val());
            for (var node in json.nodes) {
                EAA.amt.addExistingIndividual(json.nodes[node].id, json.nodes[node].label, json.nodes[node].concept);
            }
            for (var edge in json.edges) {
                EAA.amt.addExistingAssertion(json.edges[edge].id, json.edges[edge].role, json.edges[edge].from, json.edges[edge].to, json.edges[edge].width);
            }
            update();
            $("#loadModal").modal("close");
        }
    </script>
</head>

<body>
    <div id="graph" class="col s12"></div>
    <div id="footer" class="page-footer col s12 blue lighten-3">
        <div class="container">
            <div class="row">
                <div id="props" class="col s2 left-align">
                    <a class="btn-floating btn-large black" onclick="info()" title="about AMT"><i class="material-icons">info_outline</i></a>
                    <!--<a class="btn-floating btn-large black" onclick="exportOptions()" title="download data"><i class="material-icons">file_download</i></a>-->
                    <a class="btn-floating btn-large black" onclick="openGraphPropModal()" title="change view"><i class="material-icons">palette</i></a>
                </div>
                <div id="buttons" class="col s6 right-align">
                    <a class="btn-floating btn-large blue" id="r-but" onclick="edit()" title="show reasoning data"><i class="material-icons">flash_on</i></a>
                    <!--<a class="btn-floating btn-large normal blue" id="e-but" onclick="edit()" title="show input data"><i class="material-icons">input</i></a>-->
                </div>
                <div id="store" class="col s4 left-align">
                    <div><a class="btn-floating btn-large edit red" onclick="cancel()" title="Cancel changes"><i class="material-icons">cancel</i></a></div>
                    <div id="save"><a class="btn-floating btn-large normal black" onclick="save()" title="Save changes"><i class="material-icons">save</i></a></div>
                </div>
            </div>
        </div>
    </div>
    <div id="modal" class="modal">
        <input id="uri" hidden />
        <input id="concept" hidden />
        <div class="modal-content">
            <div class="row">
                <div class="input-field col s9">
                    <input id="label" type="text" placeholder="-" />
                    <label for="label">Label</label>
                </div>
                <div class="col s3 right-align">
                    <a class="btn-floating btn-large red" onclick="remove()" title="Delete node"><i class="material-icons">delete</i></a>
                    <a class="btn-floating btn-large green" onclick="saveEdit()" title="Save changes"><i class="material-icons">save</i></a>
                    <a class="btn-floating btn-large blue" onclick="cancelEdit()" title="Cancel changes"><i class="material-icons">cancel</i></a>
                </div>
            </div>
            <div class="row">
                <div class="input-field col s12">
                    <select id="role"></select>
                    <label for="role">Relation</label>
                </div>
            </div>
            <div class="row">
                <table class="bordered col s12">
                    <thead>
                        <tr>
                            <th>Individuum</th>
                            <th>Gewicht</th>
                        </tr>
                    </thead>
                    <tbody id="table"></tbody>
                </table>
            </div>
        </div>
    </div>
    <!-- Modals -->
    <div id="info" class="modal">
        <div class="modal-content">
            <br>
            <p><b>About the Creators and the Data</b></p>
            <br>
            <p>* AMT Software by Florian Thiery, Martin Unold (i3mainz).<br>* Data by Florian Thiery and Dr. Allard Mees (RGZM).</p>
        </div>
    </div>
    <div id="graphPropModal" class="modal">
        <div class="modal-content">
            <h4>Please choose an example:</h4>
            <br>
            <form class="col s12">
                <div class="row">
                    <div class="input-field col s11">
                        <select id="amt-viz">
                                <option value="siteLimesProvince">site, limes parts and provinces</option>
                                <option value="potterSiteLimes">potter, site and limes parts</option>
                                <option value="limesConnections" selected>limes connections by same potter</option>
                                <option value="limesAllen">limes relative chronology by Allen</option>
							</select>
                        <label>visualisation style</label>
                    </div>
                    <p style="padding-left:10px"><input type="checkbox" id="showGeomConcepts" /><label for="showGeomConcepts">show geometry concepts</label></p>
                    <p style="padding-left:10px"><input type="checkbox" id="showEdges" checked /><label for="showEdges">show edges</label></p>
                    <div class="col s1">
                        <a class="btn-floating btn-large green" onclick="reloadGraphWithProperties()" title="reload"><i class="material-icons">check</i></a>
                    </div>
                </div>
            </form>
        </div>
    </div>
</body>

</html>
